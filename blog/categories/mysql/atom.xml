<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Mysql | @yorzi]]></title>
  <link href="http://yorzi.github.com/blog/categories/mysql/atom.xml" rel="self"/>
  <link href="http://yorzi.github.com/"/>
  <updated>2012-10-23T13:29:22+08:00</updated>
  <id>http://yorzi.github.com/</id>
  <author>
    <name><![CDATA[Andy Wang]]></name>
    <email><![CDATA[wangyaodi@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[calculate results VS. store result sets]]></title>
    <link href="http://yorzi.github.com/2010/08/04/calculate-results-vs-store-result-sets/"/>
    <updated>2010-08-04T00:00:00+08:00</updated>
    <id>http://yorzi.github.com/2010/08/04/calculate-results-vs-store-result-sets</id>
    <content type="html"><![CDATA[<p>Firstly, what's the results in title? For example, the results may be learners who will be alive in coming two weeks, or the results may be study times of one learner, etc. Generally, results should be some data coming from analyzing other data.</p>

<p>Here my question is, how can we get certain results much faster and easily?</p>

<p><strong>Case 1:</strong>
We want to pick up a name list, all people in the list should be under certain condition, say, condition A, condition B, condition C, so normally, we just select the results which obey the rule(condition). Right? It depends.</p>

<p>If name list is always dynamically different in condition A,B,C, it's really hard to store the results set, we have to calculate instantly to make sure the results is accurate.</p>

<p>If name list is very difficult to figure out in condition A,B,C, we should store the stable part of the result set, so that we will not get stuck when calculate tons of data very time.</p>

<p><strong>Case 2.</strong>
We want to show study times of a learner, how can we do that? Should we store the study times as one attributor of study record or should we just make one study record as one-time study? Obviously, it depends on the complication of study record and the definition of one-time study.</p>

<p>In our case, one study record is instantly changed when it's in different status, so storing study times in study record is not a good idea because the results might be locked when status changes. But if we calculate study times based on its status, it will be more reliable and accurate. and also it will not be locked when status is with exception.</p>

<p><strong>Conclusion:</strong>
To store result set, is a way to cache results, but some times it's not easy to maintain the result sets, for instance, if there are too many conditions when getting a results set, it's always in heavy load to update result sets, you have to listen to every condition level changes. If the situation is complex, remember to cache your result set and maintain it carefully.</p>

<p>To calculate results instantly lets you ignore the real data, you just need to use the rule carefully, that will be more accurate, because you very time select what the rule defines. However the disadvantage is, when the data sets is large, you have to pay more to do that instantly, so you want to do a cron job or just cache the stable part of previous result sets.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Install mysql on centOS5.5]]></title>
    <link href="http://yorzi.github.com/2010/07/17/install-mysql-on-centos5-5/"/>
    <updated>2010-07-17T00:00:00+08:00</updated>
    <id>http://yorzi.github.com/2010/07/17/install-mysql-on-centos5-5</id>
    <content type="html"><![CDATA[<p><strong>STUDY NOTES(<a href="http://library.linode.com/databases/mysql/centos-5" target="_blank">Linode VPS Doc Copy</a></strong><strong>):</strong></p>

<div id="installing-mysql">
<h2>Installing MySQL</h2>
Issue the following commands to update your system and install MySQL:
<pre>yum update
yum install mysql-server
/sbin/chkconfig --levels 235 mysqld on</pre>
The MySQL server package will be installed on your server, along with dependencies and client libraries. Start MySQL by running the following  command:
<pre>service mysqld start</pre>
</div>


<div id="configuring-mysql">
<h2>Configuring MySQL</h2>
After installing MySQL, it's recommended that you run <tt>mysql_secure_installation</tt>, a program that helps secure MySQL. While running <tt>mysql_secure_installation</tt>, you will be presented with the opportunity to change the MySQL root  password, remove anonymous user accounts, disable root logins outside of  localhost, and remove test databases. It is recommended that you answer yes to  these options. If you are prompted to reload the privilege tables, select yes. Run the following command to execute the program:
<pre>mysql_secure_installation</pre>
By default, MySQL makes some assumptions about your server  environment with respect to memory. To configure MySQL more conservatively, you'll need to edit some settings in the configuration file (<tt>/etc/my.cnf</tt>) as follows:
<pre>key_buffer = 16K
max_allowed_packet = 1M
thread_stack = 64K
table_cache = 4
sort_buffer = 64K
net_buffer_length = 2K</pre>
These settings are only suggested values for a low memory  environment; please feel free to tune them to appropriate values for your server. Consult the "More Information" section at the end of this tutorial for additional resources for this topic.

MySQL will bind to localhost (127.0.0.1) by default. Allowing unrestricted access to MySQL on a public IP not advised, but you may change the address it listens on by modifying the <tt>bind-address</tt> parameter. If you decide to bind MySQL to your public IP, you should implement firewall rules that only allow connections from specific IP addresses.

</div>


<div id="using-mysql">
<h2>Using MySQL</h2>
The standard tool for interacting with MySQL is the <tt>mysql</tt> client program. To get started, issue the following command at your prompt:
<pre>mysql -u root -p</pre>
You will be prompted to enter the root MySQL user's password. Enter the password you assigned when you installed MySQL, and you'll be presented with the MySQL monitor display:
<pre>Welcome to the MySQL monitor.  Commands end with ; or \g.
Your MySQL connection id is 1
Server version: 5.0.45 Source distribution

Type 'help;' or '\h' for help. Type '\c' to clear the buffer.

mysql&gt;</pre>
Let's create a database and assign a user to it. Issue the following commands at the MySQL prompt:
<pre>CREATE DATABASE testdb;

CREATE USER 'testuser'@localhost IDENTIFIED BY 's8723hk2';

GRANT ALL PRIVILEGES ON testdb.* TO 'testuser'@localhost;

exit</pre>
Now let's log back into the MySQL client as <tt>testuser</tt> and create a sample table called "customers." Issue the following commands:
<pre>mysql -u testuser -p

USE testdb;

CREATE TABLE customers (customer_id INT NOT NULL AUTO_INCREMENT PRIMARY KEY, first_name TEXT, last_name TEXT);</pre>
This creates a table with a customer ID field of the type INT for integer (auto-incremented for new records, used as the primary key), as well as two fields for storing the customer's name. Of course, you'd probably want to store much more information than this on a customer, but it's a good example of a common case nonetheless.

</div>


<div id="resetting-the-mysql-root-password">
<h2>Resetting the MySQL  Root Password</h2>
If you've forgotten your root MySQL password, you may recover it by  issuing the following commands:
<pre>/etc/init.d/mysqld stop

mysqld_safe --skip-grant-tables &amp;

mysql -u root</pre>
The following part of the password reset will now be done within the  MySQL client program:
<pre>USE mysql;

UPDATE USER SET PASSWORD=PASSWORD("CHANGEME") WHERE USER='root';

FLUSH PRIVILEGES;

exit</pre>
Last, restart MySQL by issuing:
<pre>service mysqld restart</pre>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[mysql dump]]></title>
    <link href="http://yorzi.github.com/2009/11/06/mysql-dump/"/>
    <updated>2009-11-06T00:00:00+08:00</updated>
    <id>http://yorzi.github.com/2009/11/06/mysql-dump</id>
    <content type="html"><![CDATA[<p>I'm a little shamed that I ask Sonic for a mysql dump command several times, I rarely dump db myself, that's why I forget the way dealing with it.. Ok, the commands are:</p>

<pre name="code" class="mysql">
mysqldump -u root user_production > user_production.sql
bzip2 user_production.sql

scp from server to local.

bunzip2 user_production.sql.bz2
bzcat user_production.sql.bz2 | mysql -u root user_production
or extracts the backup files, to create db directly.
</pre>


<p>Thanks Sonic.</p>
]]></content>
  </entry>
  
</feed>
