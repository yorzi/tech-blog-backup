<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: snippet | @yorzi]]></title>
  <link href="http://yorzi.github.com/blog/categories/snippet/atom.xml" rel="self"/>
  <link href="http://yorzi.github.com/"/>
  <updated>2012-10-23T14:47:55+08:00</updated>
  <id>http://yorzi.github.com/</id>
  <author>
    <name><![CDATA[Andy Wang]]></name>
    <email><![CDATA[wangyaodi@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Script: Fetch parameter value from url]]></title>
    <link href="http://yorzi.github.com/2010/09/01/script-fetch-parameter-value-from-url/"/>
    <updated>2010-09-01T00:00:00+08:00</updated>
    <id>http://yorzi.github.com/2010/09/01/script-fetch-parameter-value-from-url</id>
    <content type="html"><![CDATA[<p>I wanna get the query string value, and set it to specific element, how to do that by javascript?
Say, http://sample.com?author=andy, how to get author value which can be lately used. see the script below:</p>

<pre><code land='javascript'>
        function fetch_value(name)
        {
          name = name.replace(/[\[]/,'\\\[').replace(/[\]]/,'\\\]');
          var regexS = '[\\?&]' + name+'=([^&#]*)';
          var regex = new RegExp( regexS );
          var results = regex.exec( window.location.href );
          if( results == null )
            return '';
          else
            return results[1];
        }
</code></pre>


<p>Then you should use this function as fetch_value("author"), it will return the "andy".</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Love named_scope]]></title>
    <link href="http://yorzi.github.com/2009/12/07/love-named_scope/"/>
    <updated>2009-12-07T00:00:00+08:00</updated>
    <id>http://yorzi.github.com/2009/12/07/love-named_scope</id>
    <content type="html"><![CDATA[<p>Rails Best Practice Snippet: About named_scope.
Reference link to the PDF. <a rel="attachment wp-att-125" href="http://tech.wangyaodi.com/?attachment_id=125">Rails-best-practices.</a></p>

<p>named_scope is a Rails 2.x feature which can simplify your rails code, move your finders into their own Model, and compact the code logically and gracefully. Below code refactoring is a named_scope sample to show the tricky.</p>

<p><strong>BEFORE</strong>
<code lang="ruby">
class PostController &lt; ApplicationController
  def search</p>

<pre><code>conditions = { :title =&gt; "%#{params[:title]}%" } if params[:title]
conditions.merge!{ :content =&gt; "%#{params[:content]}%" } if params[:content]
case params[:order]
  when "title" : order = "title desc"
  when "created_at" : order = "created_at"
end
if params[:is_published]
  conditions.merge!{ :is_published =&gt; true }
end
@posts = Post.find(:all, :conditions =&gt; conditions, :order =&gt; order,
                         :limit =&gt; params[:limit])
</code></pre>

<p>  end
end
</code></p>

<p><strong>AFTER</strong>
<code lang="ruby">
class Post &lt; ActiveRecord::Base
  named_scope :matching, lambda { |column, value|</p>

<pre><code>return {} if value.blank?
{ :conditions =&gt; ["#{column} like ?", "%#{value}%"] }
</code></pre>

<p>  }
  named_scope :order, lambda { |order|
  { :order => case order</p>

<pre><code>  when "title" : "title desc"
  when "created_at" : "created_at"
end }
</code></pre>

<p>  }
end
</code>
<code lang="ruby">
class PostController &lt; ApplicationController
  def search</p>

<pre><code>@posts = Post.matching(:title, params[:title])
             .matching(:content, params[:content])
             .order(params[:order])
</code></pre>

<p>  end
end
</code></p>

<p>More references :
<a href="http://ryandaigle.com/articles/2008/3/24/what-s-new-in-edge-rails-has-finder-functionality">http://ryandaigle.com/articles/2008/3/24/what-s-new-in-edge-rails-has-finder-functionality</a>
<a href="http://railscasts.com/episodes/108-named-scope">http://railscasts.com/episodes/108-named-scope</a></p>
]]></content>
  </entry>
  
</feed>
