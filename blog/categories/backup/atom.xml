<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: backup | @yorzi]]></title>
  <link href="http://yorzi.github.com/blog/categories/backup/atom.xml" rel="self"/>
  <link href="http://yorzi.github.com/"/>
  <updated>2012-10-23T13:23:59+08:00</updated>
  <id>http://yorzi.github.com/</id>
  <author>
    <name><![CDATA[Andy Wang]]></name>
    <email><![CDATA[wangyaodi@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[perfect backup solution for developers]]></title>
    <link href="http://yorzi.github.com/2010/09/10/perfect-backup-solution-for-developers/"/>
    <updated>2010-09-10T00:00:00+08:00</updated>
    <id>http://yorzi.github.com/2010/09/10/perfect-backup-solution-for-developers</id>
    <content type="html"><![CDATA[<p>If you are system administrator, I know you are professional to write script doing flexible customized backup. But if you are like me as a Rails developer, and you just don't wanna spend too much time to struggle with tricky scripts for file or DB backup, you mush try my recommend backup solution on *nix system. Back to the topic : easy backup with "backup" and "whenever".</p>

<p>Yes, <a href="http://github.com/meskyanichi/backup">Backup</a> and <a href="http://github.com/javan/whenever">Whenever</a> is the best and easiest solution to manage your backup. They are all Ruby gems which are open sourced on github. Most of all, they are all working well both with Rails and with pure *nix environment.</p>

<p>While using Backup, it's like a configuration file with easy rule, don't worry about the rule, I believe you will understand it in seconds. It also owns many common slots to different DB(or S3), you can also config your customized command and script inside its backup.rb file. Whenever is the Ruby way to manage your <a href="http://en.wikipedia.org/wiki/Cron">Cron</a> jobs, It's pretty cool.</p>

<p>Don't hesitate to try them out, you will find the inside beauty of backup. Enjoy!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Formtastic for Rails]]></title>
    <link href="http://yorzi.github.com/2009/12/22/formtastic-for-rails/"/>
    <updated>2009-12-22T00:00:00+08:00</updated>
    <id>http://yorzi.github.com/2009/12/22/formtastic-for-rails</id>
    <content type="html"><![CDATA[<div>

I've been working on EQ portal during these days, I wanna share a useful gem which I used, it is called <a href="http://github.com/justinfrench/formtastic/tree/0.9.7">Formtastic</a>. it's a nice way to create form via formtastic, so the finial form is something like:
<code lang="ruby">
<% semantic_form_for @landing, :url=>admin_landings_path do |form| %>
  <p>
    <% form.inputs do %>
      <%= form.input :title, :label => 'Title' %>
      <%= form.input :url_slug, :label => 'Url slug' %>
      <%= form.input :meta, :label => 'Meta' %>
      <%= form.input :content, :label => 'Content' %>
    <% end %>
  </p>
  <p><%= form.buttons %></p>
<% end %>
</code>

Then it will generate HTML like this:
<code lang='ruby'>
<form action="/admin/landings" class="formtastic landing" id="new_landing" method="post"><div style="margin:0;padding:0;display:inline"><input name="authenticity_token" type="hidden" value="EC9WF1oK80Iq6X4NegSkBfVx5gLiYWvBEd7VeNKWHio=" /></div>
  <p>
    <fieldset class="inputs"><ol>
      <li class="string required" id="landing_title_input"><label for="landing_title">Title<abbr title="required">*</abbr></label><input id="landing_title" maxlength="255" name="landing[title]" size="30" type="text" /></li>
      <li class="string required" id="landing_url_slug_input"><label for="landing_url_slug">Url slug<abbr title="required">*</abbr></label><input id="landing_url_slug" maxlength="255" name="landing[url_slug]" size="30" type="text" /></li>
      <li class="text required" id="landing_meta_input"><label for="landing_meta">Meta<abbr title="required">*</abbr></label><textarea cols="40" id="landing_meta" name="landing[meta]" rows="20"></textarea></li>
      <li class="text required" id="landing_content_input"><label for="landing_content">Content<abbr title="required">*</abbr></label><textarea cols="40" id="landing_content" name="landing[content]" rows="20"></textarea></li>

    </ol></fieldset>
  </p>
  <p><fieldset class="buttons"><ol><li class="commit"><input class="create" id="landing_submit" name="commit" type="submit" value="Create Landing" /></li></ol></fieldset></p>
</form>
</code>
Also, it can be configured well in display style(not try yet), as well as working with this <a href="http://github.com/redinger/validation_reflection">validation plugin</a>

There is a more detailed Doc at: <a href="http://rdoc.info/rdoc/justinfrench/formtastic/blob/35eadf9a0f3e30101993419c3dd3327fb2fdd0b6/Formtastic/SemanticFormBuilder.html">http://rdoc.info/rdoc/justinfrench/formtastic/blob/35eadf9a0f3e30101993419c3dd3327fb2fdd0b6/Formtastic/SemanticFormBuilder.html</a>.Â  And samples at: <a href="http://asciicasts.com/episodes/184-formtastic-part-1">http://asciicasts.com/episodes/184-formtastic-part-1</a>

Enjoy it.</div>

]]></content>
  </entry>
  
</feed>
