<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: dalli | @yorzi]]></title>
  <link href="http://yorzi.github.com/blog/categories/dalli/atom.xml" rel="self"/>
  <link href="http://yorzi.github.com/"/>
  <updated>2012-10-22T22:42:40+08:00</updated>
  <id>http://yorzi.github.com/</id>
  <author>
    <name><![CDATA[Andy Wang]]></name>
    <email><![CDATA[wangyaodi@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Dalli on Rails3]]></title>
    <link href="http://yorzi.github.com/2011/01/22/dalli-on-rails3/"/>
    <updated>2011-01-22T00:00:00+08:00</updated>
    <id>http://yorzi.github.com/2011/01/22/dalli-on-rails3</id>
    <content type="html"><![CDATA[<p>Today I tried a new pure Ruby <a href="http://memcached.org/" target="_blank">memcahed</a> client in one of my Rails3 projects, it's named as "<a href="https://github.com/mperham/dalli" target="_blank">Dalli</a>". It's an excellent memcached client as <a href="http://www.mikeperham.com/">Mike Perham</a> announced in August last year. You can detect more details about it on its code. Dalli is just faster performance than memcache-client and easy to use in Rails3 or on <a href="http://heroku.com" target="_blank">Heroku</a>.</p>

<p>Make sure you've installed 1.4+ memcached on your machine, then you can configure Dalli as what you did with memcache-client before:
1. add gem in Gemfile
<code lang="ruby">
gem 'dalli'
</code>
2. Config the underlying cache store as dalli_store in production.rb
<code lang="ruby"></p>

<h1>Memcached is delaulted on port 11211.</h1>

<p>config.cache_store = :dalli_store, 'localhost:11211'
</code>
3. Now you will find the Rails.cache class is changed to Rails.cache.class:
<code lang="ruby"></p>

<blockquote><blockquote><p>Rails.cache.class
== ActiveSupport::Cache::DalliStore
</code>
4. You can use it easily in you Rails3 application
<code lang="ruby">
class Food &lt; ActiveRecord::Base
   after_save :expire_food_caches</p></blockquote></blockquote>

<p>   def self.all_view_types</p>

<pre><code>  Rails.cache.fetch("food_types") do
      Food.all.map{|s| s.view_type}.uniq
  end
</code></pre>

<p>   end</p>

<p>   protected
   def expire_food_caches</p>

<pre><code>   unless Food.all_view_types.include?(self.view_type)
       Rails.cache.delete("food_types")
   end
</code></pre>

<p>   end
end
</code>
<em><strong>Note</strong>: Rails.cache.fetch() with a block will return the cached value if it exists, otherwise it will return the value and write cache with the value at the same time.</em></p>

<p>Resource about Cache:
Scaling Rails : <br /><a href="http://railslab.newrelic.com/scaling-rails">http://railslab.newrelic.com/scaling-rails</a>
Caching with Rails : <br /><a href="http://guides.rubyonrails.org/caching_with_rails.html">http://guides.rubyonrails.org/caching_with_rails.html</a>
ActiveSupport::Cache::Store : <br /><a href="http://api.rubyonrails.org/classes/ActiveSupport/Cache/Store.html#method-i-clear">http://api.rubyonrails.org/classes/ActiveSupport/Cache/Store.html#method-i-clear</a>
ActiveSupport::Memoizable : <br /><a href="http://ilstar.blogbus.com/logs/84754288.html#cmt">http://ilstar.blogbus.com/logs/84754288.html#cmt</a></p>
]]></content>
  </entry>
  
</feed>
