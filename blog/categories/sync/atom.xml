<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: sync | @yorzi]]></title>
  <link href="http://yorzi.github.com/blog/categories/sync/atom.xml" rel="self"/>
  <link href="http://yorzi.github.com/"/>
  <updated>2012-10-22T22:42:40+08:00</updated>
  <id>http://yorzi.github.com/</id>
  <author>
    <name><![CDATA[Andy Wang]]></name>
    <email><![CDATA[wangyaodi@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Titanium : DB Synchronization]]></title>
    <link href="http://yorzi.github.com/2010/07/14/titanium-db-synchronization/"/>
    <updated>2010-07-14T00:00:00+08:00</updated>
    <id>http://yorzi.github.com/2010/07/14/titanium-db-synchronization</id>
    <content type="html"><![CDATA[<p><strong>Header Notes:</strong>
1. Static data should be released with app, just don't do db synchronization.
2. Just embed sync background when ppl looking at some instructions/tips etc.
3. Don't update db all the time.</p>

<p>App Start:
<em><strong>app.js</strong></em>
<code lang='javascript'>
// Localization libs
Ti.include('l10n/l10n.js');
Ti.include('l10n/l10n_dialog.js');
Ti.include('l10n/l10n_format.js');</p>

<p>var db = Titanium.Database.install('eq31formulas.db', 'eq31formulas');</p>

<p>// Ti.include('content/tab_formula.js')</p>

<p>// this sets the background color of the master UIView (when there are no windows/tab groups on it)
Titanium.UI.setBackgroundColor('#000');</p>

<p>// create tab group
var tabGroup = Titanium.UI.createTabGroup();</p>

<p>//
// create tab for tips
//
Ti.include('content/tab_tips.js');</p>

<p>//
// create tab for weibo
//
Ti.include('content/tab_weibo.js');</p>

<p>//
// create tab for formulas
//
Ti.include('content/tab_formulas.js');</p>

<p>// create tab for lang settings
var win_setting = Ti.UI.createWindow({</p>

<pre><code>title:_('tab_settings')
</code></pre>

<p>});</p>

<p>var tab_setting = Ti.UI.createTab({</p>

<pre><code>icon:'images/nav_icon_setting.png',
title:_('tab_settings'),
window:win_setting
</code></pre>

<p>});</p>

<p>var data = [];
var ACTION_LANGUAGE = 0;</p>

<p>var row = Ti.UI.createTableViewRow({
  title: _('language'),
  hasChild: true,
  action: ACTION_LANGUAGE,
  className: 'control'
});</p>

<p>var label_lang = Ti.UI.createLabel({
  textAlign: 'right',
  right: 10,
  width: 175,
  color: '#385487',
  font: {fontSize: 16},
  text: L10N.getLanguageDisplayName()
});</p>

<p>row.add(label_lang);</p>

<p>data.push(row);</p>

<p>// create table view</p>

<p>var tableview = Ti.UI.createTableView({
  data:data,
  style:Ti.UI.iPhone.TableViewStyle.GROUPED
});</p>

<p>// add table click listener</p>

<p>tableview.addEventListener('click', function(e) {
  var rowdata = e.rowData;
  if (rowdata.action == ACTION_LANGUAGE) {</p>

<pre><code>// show language selection dialog

L10N.showLanguageSelectionDialog();
</code></pre>

<p>  }
});</p>

<p>win_setting.add(tableview);</p>

<p>//
//  add tabs
//
tabGroup.addTab(tab_formulas);<br/>
tabGroup.addTab(tab_tips);<br/>
tabGroup.addTab(tab_weibo);
tabGroup.addTab(tab_setting);</p>

<p>var omodes = [</p>

<pre><code>Titanium.UI.PORTRAIT,
Titanium.UI.UPSIDE_PORTRAIT,
Titanium.UI.LANDSCAPE_LEFT,
Titanium.UI.LANDSCAPE_RIGHT
</code></pre>

<p>];</p>

<p>win_formulas.orientationModes = omodes;
win_tips.orientationModes = omodes;
win_weibo.orientationModes = omodes;</p>

<p>Titanium.Analytics.featureEvent('app.feature.blah',{product:'killer'});</p>

<p>tabGroup.addEventListener('open',function()
{</p>

<pre><code>Titanium.UI.setBackgroundColor('#fff');
</code></pre>

<p>});</p>

<p>tabGroup.setActiveTab(0);
tabGroup.open({</p>

<pre><code>transition:Titanium.UI.iPhone.AnimationStyle.FLIP_FROM_LEFT
</code></pre>

<p>});</p>

<p>// add top level introduction of 31 formulas
Ti.include("introduction.js");</p>

<p>// synchronize db
Ti.include("synchronize.js");</p>

<p></code></p>

<p>Prepare data while launching the app:
<em><strong>synchronize.js</strong></em>
<code lang="javascript">
(function(){</p>

<pre><code>var db = Titanium.Database.open('eq31formulas');

    // JS test
var currentTime = new Date();
var month = currentTime.getMonth() + 1;
var day = currentTime.getDate();
var year = currentTime.getFullYear();

Titanium.API.info('JS TIME:' + currentTime);
// lesson = db.execute('SELECT * FROM LESSONS ORDER BY ID LIMIT 1')

if (Titanium.Network.online == true)
{
    Titanium.API.info('Online--update lessons!');
    var src = 'http://www.veecue.com/eq31formulas/data_service/lessons';
    c = Titanium.Network.createHTTPClient();

    c.onload = function()
    {   
        var json_data = JSON.parse(this.responseText);

        Titanium.API.info('lesson count:' + json_data.length);

        for(var i=0; i&lt;json_data.length; i++)
        {
            Titanium.API.info("updating lesson:" + i);
            var record = json_data[i].lesson;
            // add different control for UPDATE or INSERTION here
            db.execute('CREATE TABLE IF NOT EXISTS LESSONS (ID INTEGER, TITLE TEXT, AIMS TEXT, ANSWER_ORDER TEXT, LANG_STEP TEXT, MODEL_ANSWER TEXT)');
            db.execute('DELETE FROM LESSONS');
            db.execute("INSERT INTO LESSONS (ID, TITLE, AIMS, ANSWER_ORDER, LANG_STEP, MODEL_ANSWER) VALUES(?,?,?,?,?,?)", record.id, record.title, record.aims, record.answer_order, record.lang_step, record.model_answer);   
        }
    };

    // open the client
    c.open('GET', src);

    // send the data
    c.send();
}
else
{
    Titanium.API.info('Offline--');
    return;
}   
</code></pre>

<p>})();
</code></p>
]]></content>
  </entry>
  
</feed>
